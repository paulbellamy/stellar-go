package processors

import (
	"context"

	"github.com/stellar/go/ingest"
	"github.com/stellar/go/services/horizon/internal/toid"
	"github.com/stellar/go/support/errors"
	"github.com/stellar/go/xdr"
)

type claimableBalance struct {
	internalID     int64 // Bigint auto-generated by postgres
	transactionSet map[int64]struct{}
	operationSet   map[int64]struct{}
}

func (b *claimableBalance) addTransactionID(id int64) {
	if b.transactionSet == nil {
		b.transactionSet = map[int64]struct{}{}
	}
	b.transactionSet[id] = struct{}{}
}

func (b *claimableBalance) addOperationID(id int64) {
	if b.operationSet == nil {
		b.operationSet = map[int64]struct{}{}
	}
	b.operationSet[id] = struct{}{}
}

type ClaimableBalancesTransactionProcessor struct {
	changeset *Changeset
	sequence  uint32
}

func NewClaimableBalancesTransactionProcessor(changeset *Changeset, sequence uint32) *ClaimableBalancesTransactionProcessor {
	return &ClaimableBalancesTransactionProcessor{
		changeset: changeset,
		sequence:  sequence,
	}
}

func (p *ClaimableBalancesTransactionProcessor) ProcessTransaction(ctx context.Context, transaction ingest.LedgerTransaction) error {
	err := p.addTransactionClaimableBalances(p.sequence, transaction)
	if err != nil {
		return err
	}

	err = p.addOperationClaimableBalances(p.sequence, transaction)
	if err != nil {
		return err
	}

	return nil
}

func (p *ClaimableBalancesTransactionProcessor) addTransactionClaimableBalances(sequence uint32, transaction ingest.LedgerTransaction) error {
	transactionID := toid.New(int32(sequence), int32(transaction.Index), 0).ToInt64()
	transactionClaimableBalances, err := claimableBalancesForTransaction(
		transaction,
	)
	if err != nil {
		return errors.Wrap(err, "Could not determine claimable balances for transaction")
	}

	for _, cbID := range transactionClaimableBalances {
		p.changeset.AddClaimableBalanceTransaction(cbID, transactionID)
	}

	return nil
}

func claimableBalancesForTransaction(
	transaction ingest.LedgerTransaction,
) ([]string, error) {
	changes, err := transaction.GetChanges()
	if err != nil {
		return nil, err
	}
	cbs, err := claimableBalancesForChanges(changes)
	if err != nil {
		return nil, errors.Wrapf(err, "reading transaction %v claimable balances", transaction.Index)
	}
	return dedupeClaimableBalances(cbs)
}

func dedupeClaimableBalances(in []string) (out []string, err error) {
	set := map[string]struct{}{}
	for _, id := range in {
		set[id] = struct{}{}
	}

	for id := range set {
		out = append(out, id)
	}
	return
}

func claimableBalancesForChanges(
	changes []ingest.Change,
) ([]string, error) {
	var cbs []string

	for _, c := range changes {
		if c.Type != xdr.LedgerEntryTypeClaimableBalance {
			continue
		}

		if c.Pre == nil && c.Post == nil {
			return nil, errors.New("Invalid io.Change: change.Pre == nil && change.Post == nil")
		}

		var claimableBalanceID xdr.ClaimableBalanceId
		if c.Pre != nil {
			claimableBalanceID = c.Pre.Data.MustClaimableBalance().BalanceId
		}
		if c.Post != nil {
			claimableBalanceID = c.Post.Data.MustClaimableBalance().BalanceId
		}
		id, err := xdr.MarshalHex(claimableBalanceID)
		if err != nil {
			return nil, err
		}
		cbs = append(cbs, id)
	}

	return cbs, nil
}

func (p *ClaimableBalancesTransactionProcessor) addOperationClaimableBalances(sequence uint32, transaction ingest.LedgerTransaction) error {
	claimableBalances, err := claimableBalancesForOperations(transaction, sequence)
	if err != nil {
		return errors.Wrap(err, "could not determine operation claimable balances")
	}

	for operationID, cbs := range claimableBalances {
		for _, cbID := range cbs {
			p.changeset.AddClaimableBalanceTransaction(cbID, operationID)
		}
	}

	return nil
}

func claimableBalancesForOperations(transaction ingest.LedgerTransaction, sequence uint32) (map[int64][]string, error) {
	cbs := map[int64][]string{}

	for opi, op := range transaction.Envelope.Operations() {
		operation := transactionOperationWrapper{
			index:          uint32(opi),
			transaction:    transaction,
			operation:      op,
			ledgerSequence: sequence,
		}

		changes, err := transaction.GetOperationChanges(uint32(opi))
		if err != nil {
			return cbs, err
		}
		c, err := claimableBalancesForChanges(changes)
		if err != nil {
			return cbs, errors.Wrapf(err, "reading operation %v claimable balances", operation.ID())
		}
		cbs[operation.ID()] = c
	}

	return cbs, nil
}

func (p *ClaimableBalancesTransactionProcessor) Commit(ctx context.Context) error {
	// Stub for interface. Changes are committed by the changeset.
	return nil
}
